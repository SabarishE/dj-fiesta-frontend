import Head from "next/head";
import { Box, HStack, Text } from "@chakra-ui/react";
import { Layout } from "components/layout/Layout";
import { API_URL, events_per_page } from "config";
import { EventInterface } from "types/event";
import { Fragment, useEffect, useState } from "react";
import { EventItem } from "components/EventItem";
import { GetServerSideProps } from "next";
import { Pagination } from "components/Pagination";
import { AlertTriangleOutline } from "@emotion-icons/evaicons-outline/AlertTriangleOutline";

export default function EventsPage({
  events,
  page,
  totalEvents,
}: {
  events: EventInterface[];
  page: number;
  totalEvents: number;
}) {
  const [hydrated, setHydrated] = useState(false);

  useEffect(() => {
    setHydrated(true);
  }, []);

  if (!hydrated) {
    return null;
  }

  return (
    <>
      <Head>
        <title>Home</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout title="Home">
        <Box maxW="800px" mx="auto">
          <HStack alignItems="center" justifyContent="space-between">
            <Text
              fontSize={["18px", "28px"]}
              fontWeight="semibold"
              color="blue.800"
            >
              Upcoming events
            </Text>
            <Pagination page={page} totalEvents={totalEvents} />
          </HStack>
          <Box>
            {events.length === 0 ? (
              <HStack justifyContent="center" py={10}>
                <AlertTriangleOutline size="16px" />
                <Text
                  fontWeight="semibold"
                  fontSize={["12px", "16px"]}
                  lineHeight={["16px", "18px"]}
                >
                  No events to display
                </Text>
              </HStack>
            ) : (
              events.map((event, index) => {
                return (
                  <Fragment key={index}>
                    <EventItem event={event} />
                  </Fragment>
                );
              })
            )}
          </Box>
        </Box>
      </Layout>
    </>
  );
}

export const getServerSideProps: GetServerSideProps<{
  events: EventInterface[];
  page: number;
  totalEvents: number;
}> = async (context) => {
  const { page = 1 } = context.query;

  const start = +page === 1 ? 0 : (+page - 1) * events_per_page;

  const res = await fetch(
    `${API_URL}/api/events?populate=*&sort[0]=date:ASC&pagination[start]=${start}&pagination[limit]=${events_per_page}`
  );
  const data = await res.json();

  const totalEvents = data.meta.pagination.total;

  const events = data.data.map(
    (event: { attributes: EventInterface; id: number }) => {
      return event.attributes;
    }
  );

  return {
    props: { events, page: +page, totalEvents },
  };
};
